{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pragmatic Dev Snippets","text":"<p>A collection of practical code snippets, commands, and tips for everyday development tasks.</p>"},{"location":"cloud/","title":"Index","text":"<p>Cover Azure and AWS. Focus on terraform for Azure and CloudFormation for AWS.</p>"},{"location":"cloud/aws/","title":"AWS","text":"<p>AWS</p>"},{"location":"cloud/azure/","title":"Azure","text":"<p>The Microsoft Cloud Adoption Framework for Azure provides a good overview of Azure from the point fo view of setting up a cloud environment. Specifically, the Ready (Prepare for Cloud adoption) section explains the following concepts:</p> <ul> <li>Tenant: The top-level way to manage identities and access in Microsoft Entra.</li> <li>Account: A secure and well-managed identity in Microsoft Entra ID. Entra ID is a product of Entra and it provides identity and access management in Azure.</li> <li>Subscription: A unit of management, billing, and scale within Azure.</li> <li>Landing zone: An environment for hosting your Azure resources</li> </ul>"},{"location":"cloud/azure/#azure-cli","title":"Azure CLI","text":""},{"location":"cloud/azure/#configuration","title":"Configuration","text":"<p>In your home folder, <code>~/.azure/azureProfile.json</code>, you can see <code>tenant</code>, <code>user</code>, and <code>subscription</code> information.</p>"},{"location":"cloud/azure/#commands","title":"Commands","text":"<p>To start an Azure CLI working session, log in to the Azure CLI using:</p> <pre><code>az login\n</code></pre> <p>You will typically be asked to select a subscription.</p>"},{"location":"cloud/azure/#setting-up-an-azure-container-web-app-using-terraform","title":"Setting up an Azure Container (Web) App using Terraform","text":""},{"location":"cloud/azure/#initial-configuration","title":"Initial Configuration","text":"<p>Using the Azure console (or CLI), create a resource group (called <code>web-flask-aca-rg</code>), a storage account (called <code>lalver1azurelearning</code>) in the resource group, and a blob container (called <code>tfstate</code>) in the storage account. This is where Terraform's state file will be saved.</p> <p>Terraform state</p> <p>Terraform uses a state file (<code>terraform.tfstate</code>) to keep track of the infrastructure it manages. It records resources you\u2019ve created, their IDs, properties, and relationships.</p> <p>When you run <code>terraform plan</code> or <code>terraform apply</code>, Terraform compares your config (<code>.tf</code> files) with the current state to determine what needs to be added, changed, or destroyed. Without the state, Terraform wouldn\u2019t know what\u2019s already deployed.</p> <p>By default, Terraform keeps state locally (a <code>JSON</code> file in your project directory). This works if you\u2019re the only one managing the infrastructure. But for real projects, using a local state is risky. It can cause collaboration issues where multiple engineers could overwrite each other\u2019s state. If the state file is lost, Terraform loses track of your resources. In addition, it can cause security issues since the state file may contain secrets.</p> <p>Keeping the state file in Azure Blob storage is ideal since all team members can use the same state. It's safe, since the state is persisted in Azure, not just locally. You can take advanrtage of versioning, so with blob versioning enabled, you can roll back to an older state if needed.</p>"},{"location":"cloud/azure/#deploying-resources","title":"Deploying resources","text":"<p>To deploy the resources that make up the web app:</p> <ul> <li> <p>Log in to the Azure CLI.</p> </li> <li> <p>From the folder containing the <code>.tf</code> file, initialize Terraform using:</p> <pre><code>terraform init\n</code></pre> <p>Terraform downloads the AzureRM provider (hashicorp/azurerm) and connects to your existing storage account backend (<code>lalver1azurelearning</code>) and checks the state container (<code>tfstate</code>).</p> </li> <li> <p>Import the resource group using:</p> <pre><code>terraform import azurerm_resource_group.rg /subscriptions/&lt;sub_id&gt;/resourceGroups/web-flask-aca-rg\n</code></pre> <p>This tells Terraform that the resource already exists, so add it to state instead of creating it. Terraform then can start managing it.</p> </li> <li> <p>Preview the deployment (plan) by using</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>This shows you exactly what resources Terraform intends to create/modify.</p> </li> <li> <p>Apply the plan</p> <pre><code>terraform apply tfplan\n</code></pre> <p>This actually provisions the resources in Azure.</p> </li> </ul>"},{"location":"cloud/azure/#version-control","title":"Version control","text":"<p>After running <code>terraform init</code> ensure that you set up your version control for:</p> File Description Version control? <code>.terraform.lock.hcl</code> A dependency lock file. Records the exact provider versions (e.g. hashicorp/azurerm v3.117.1) and their checksums. Ensures reproducible deployments \u2014 so when you or a teammate run terraform init again, you all get the same provider version. Yes <code>terraform.tfstate</code> The local copy of Terraform state. By default, Terraform creates it locally. No <code>LICENSE.txt</code> License file that comes bundled with the Terraform provider plugin (terraform-provider-azurerm). No <code>terraform-provider-azurerm_v3.117.1_x5</code> The actual compiled provider binary that Terraform downloaded. Platform-specific (that _x5 suffix refers to your OS/arch build). Lives in the working dir so Terraform can run. Auto-managed by terraform init. No"},{"location":"docker/build/","title":"Create an Image without Compose","text":"<p>The following commands are equivalent and can be used to build a docker image</p> <ul> <li><code>docker image build</code></li> <li><code>docker build</code></li> <li><code>docker buildx build</code></li> <li><code>docker builder build</code></li> </ul> <p>For example, assuming the directory structure:</p> <pre><code>src\n\u2514\u2500\u2500 analysis\n    \u2514\u2500\u2500 Dockerfile\n</code></pre> <p>Inside <code>src</code> run</p> <pre><code>docker buildx build -t azavea/pfb-network-connectivity:0.16.1 -f analysis/Dockerfile .\n</code></pre> <p>to create an image called <code>azavea/pfb-network-connectivity:0.16.1</code> using the <code>Dockerfile</code> in the <code>analysis</code> directory.</p>"},{"location":"docker/compose/","title":"Create an Image with Compose","text":"<p>The following command can be used to build a docker image using Compose</p> <ul> <li><code>docker compose</code></li> </ul> <p>For example, assuming the directory structure:</p> <pre><code>src\n\u2514\u2500\u2500 analysis\n    \u2514\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 compose.yml\n</code></pre> <p>and a <code>compose.yml</code> given by:</p> <pre><code>name: project-name\nversion: \"1.0\"\n\nservices:\n  service1:\n    build:\n      context: .\n      dockerfile: analysis/Dockerfile\n    image: image_name:latest\n</code></pre> <p>Inside <code>src</code> run</p> <pre><code>docker compose build service1\n</code></pre> <p>to create an image called <code>image_name:latest</code> for the <code>service1</code> service using the <code>Dockerfile</code> in the <code>analysis</code> directory.</p>"},{"location":"version-control/git/","title":"Rewriting history","text":""},{"location":"version-control/git/#one","title":"One","text":""},{"location":"version-control/git/#undoing-commits","title":"Undoing commits","text":""},{"location":"version-control/git/#using-tags-for-versioning-in-git","title":"Using tags for Versioning in Git","text":""},{"location":"version-control/git/#steps-to-release-a-version-following-semver","title":"Steps to release a version following SemVer","text":"<p>Assuming a forking workflow:</p> <ol> <li>Pull latest <code>main</code> branch from <code>upstream</code> repo (and update our fork while we are at it)</li> </ol> <pre><code>git pull upstream main\ngit push origin main\n</code></pre> <ol> <li>Create branch to prepare new release</li> </ol> <pre><code>git switch -c prepare-release\n</code></pre> <ol> <li> <p>Update pyproject.toml, CHANGELOG, README.</p> </li> <li> <p>pyproject.toml</p> </li> </ol> <pre><code>[tool.poetry]\nname = \"project-name\"\nversion = \"MAJOR.MINOR.PATCH\"\n</code></pre> <ul> <li>CHANGELOG.md</li> </ul> <pre><code>## [MAJOR.MINOR.PATCH] - YYYY-MM-DD\n\n### Added\n\n- Items\n\n[MAJOR.MINOR.PATCH]:\n  https://github.com/organization/project/releases/tag/MAJOR.MINOR.PATCH\n</code></pre> <ul> <li>README.md</li> </ul> <pre><code>Install the application using `pip`:\n\npip install git+https://github.com/organization/project@MAJOR.MINOR.PATCH\n</code></pre> <ol> <li>Commit using this sample commit message</li> </ol> <pre><code>Prepare codebase for MAJOR.MINOR.PATCH release\n\nPrepares the codebase for the MAJOR.MINOR.PATCH release.\n</code></pre> <ol> <li>Create PR with a required reviewer</li> </ol> <pre><code>gh pr create --fill -a @me -r reviewer'sgithubaccount\n</code></pre> <ol> <li>After PR is approved, update <code>main</code> branch (and update our fork while we are at it)</li> </ol> <pre><code>git pull upstream main\ngit push origin main\n</code></pre> <ol> <li>Create the current version's tag</li> </ol> <pre><code>git tag -am MAJOR.MINOR.PATCH \"MAJOR.MINOR.PATCH\"\n</code></pre> <ol> <li>Push tags upstream</li> </ol> <pre><code>git push upstream --tags\n</code></pre>"},{"location":"version-control/github/","title":"GitHub Pull Request Workflow","text":""},{"location":"version-control/github/#updating-a-pr","title":"Updating a PR","text":"<p>After a pr has been updated (the author has made changes to original pr and pushed updated branch), use <code>git pull</code> (if created using <code>git pr ...</code>) to locally see the changes (for example to test, etc.)</p>"},{"location":"version-control/github/#code-review-workflow","title":"Code Review Workflow","text":"<p>Use the \"add suggestion\" icon to show proposed code.</p>"},{"location":"version-control/github/#on-top-of-workflow","title":"\"On top of\" Workflow","text":""}]}